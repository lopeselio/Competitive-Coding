C++:
----
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() <= 1) return 0;
        int A = 0, B = -prices[0], C = 0;
        for(int i = 1; i < prices.size(); ++i){
            int tmp = A;
            A = max(A, C);
            C = B + prices[i];
            B = max(B, tmp - prices[i]);
        }
        return max(A, C);
    }
};


Java:
----
class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length <= 1) return 0;
        int A = 0, B = -prices[0], C = 0;
        for(int i = 1; i < prices.length; ++i){
            int tmp = A;
            A = Math.max(A, C);
            C = B + prices[i];
            B = Math.max(B, tmp - prices[i]);
        }
        return Math.max(A, C);
    }
}


Python3:
-------
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) <= 1: return 0
        A, B, C = 0, -prices[0], 0
        for i in range(1, len(prices)):
            tmp = A
            A = max(A, C)
            C = B + prices[i]
            B = max(B, tmp - prices[i])
        
        return max(A, C)
