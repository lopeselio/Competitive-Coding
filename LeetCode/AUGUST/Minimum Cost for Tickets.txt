C++:
----
class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n = days.size();
        vector<int> dp(n+1, 365*costs[0]);
        dp[n] = 0;
        
        for(int i = n-1; i >= 0; --i){
            int d7 = i, d30 = i;
            while(d7 < n && days[d7] < days[i] + 7) ++d7;
            while(d30 < n && days[d30] < days[i] + 30) ++d30;
            dp[i] = min({costs[0] + dp[i+1], costs[1] + dp[d7], costs[2] + dp[d30]});
        }
        return dp[0];
    }
};


Java:
----
class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int n = days.length;
        int[] dp = new int[n+1];
        for(int i = 0; i < n; ++i) dp[i] = 365*costs[0];
        
        for(int i = n-1; i >= 0; --i){
            int d7 = i, d30 = i;
            while(d7 < n && days[d7] < days[i] + 7) ++d7;
            while(d30 < n && days[d30] < days[i] + 30) ++d30;
            dp[i] = Math.min(costs[0] + dp[i+1], Math.min(costs[1] + dp[d7], costs[2] + dp[d30]));
        }
        return dp[0];
    }
}


Python3:
--------
class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        n = len(days)
        dp = [365*costs[0]] * (n+1)
        dp[n] = 0
        
        for i in range(n-1, -1, -1):
            d7, d30 = i, i
            while d7 < n and days[d7] < days[i] + 7: d7 += 1
            while d30 < n and days[d30] < days[i] + 30: d30 += 1
            dp[i] = min(costs[0] + dp[i+1], costs[1] + dp[d7], costs[2] + dp[d30])
        
        return dp[0]
