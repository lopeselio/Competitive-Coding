All Paths From Source to Target

Solution
Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

Example:
Input: [[1,2], [3], [3], []] 
Output: [[0,1,3],[0,2,3]] 
Explanation: The graph looks like this:
0--->1
|    |
v    v
2--->3
There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Note:

The number of nodes in the graph will be in the range [2, 15].
You can print different paths in any order, but you should keep the order of nodes inside one path.

=========================SOLUTION================================================
C++
class Solution {
    void dfs(vector<vector<int>>& graph, vector<vector<int>>& result, vector<int>& path, int u){
        path.push_back(u);
        if(u == graph.size()-1) result.push_back(path);
        else 
            for(int v: graph[u]) dfs(graph, result, path, v);
        path.pop_back();
    }
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> result;
        vector<int> path;
        dfs(graph, result, path, 0);
        return result;
    }
};
================================================================================
JAVA
class Solution {
    private void dfs(int[][] graph, List<List<Integer>> result, List<Integer> path, int u){
        path.add(u);
        if(u == graph.length-1) result.add(new ArrayList(path));
        else 
            for(int v: graph[u]) dfs(graph, result, path, v);
        path.remove(path.size()-1);
    }
    
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList();
        List<Integer> path = new ArrayList();
        dfs(graph, result, path, 0);
        return result;
    }
}
=============================================================================
PYTHON
class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        result = []
    
        def dfs(path, u):
            if u == len(graph)-1: result.append(path + [u])
            else:
                for v in graph[u]: dfs(path + [u], v)
            
        dfs([], 0)
        return result

