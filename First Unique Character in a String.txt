First Unique Character in a String
Solution
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.
---------------------------------------------------SOLUION------------------------------------------------------------
O(n)
///C++
class Solution {
public:
    int firstUniqChar(string s) {
        int count[26]={0};
        
        for(char cr: s){
            count[cr -'a'] += 1;
        }
        
        for( int i=0; i<s.length(); i++){
            if(count[s[i]-'a']==1){
                return i;
            }
        }
        return -1;
        
    }
};

--------------------------------------------------END------------------------------------------------------------------

//JAVA
class Solution {
    public int firstUniqChar(String s) {
        int[] count = new int[26];
        
        for(char cr: s.toCharArray()){
            count[cr -'a'] += 1;
        }
        
        for( int i=0; i<s.length(); i++){
            if(count[s.charAt(i) -'a'] ==1 ){
                return i;
            }
        }
        return -1;
        
    }
}
END------------------------------------------------------------------

//PYTHON

class Solution:
    def firstUniqChar(self, s: str) -> int:
        count = [0]*26
        
        for cr in s:
            count[ord(cr) -ord('a')] += 1
        
        
        for i in range(len(s)):
            if count[ord(s[i]) - ord('a')] ==1:
                return i
            
        
        return -1
        

